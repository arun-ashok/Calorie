# coding: utf-8

"""
    AddSkill

    This is the swagger for LockDownMainHealthy at AddSkill.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: akanksha@addskill.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Meal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'meal_id': 'int',
        'food_name': 'str',
        'description': 'str',
        'calorie': 'int',
        '_date': 'str',
        'time': 'str',
        'is_in_days_limit': 'bool'
    }

    attribute_map = {
        'meal_id': 'meal_id',
        'food_name': 'food_name',
        'description': 'description',
        'calorie': 'calorie',
        '_date': 'date',
        'time': 'time',
        'is_in_days_limit': 'is_in_days_limit'
    }

    def __init__(self, meal_id=None, food_name=None, description=None, calorie=None, _date=None, time=None, is_in_days_limit=None):  # noqa: E501
        """Meal - a model defined in Swagger"""  # noqa: E501

        self._meal_id = None
        self._food_name = None
        self._description = None
        self._calorie = None
        self.__date = None
        self._time = None
        self._is_in_days_limit = None
        self.discriminator = None

        if meal_id is not None:
            self.meal_id = meal_id
        if food_name is not None:
            self.food_name = food_name
        if description is not None:
            self.description = description
        if calorie is not None:
            self.calorie = calorie
        if _date is not None:
            self._date = _date
        if time is not None:
            self.time = time
        if is_in_days_limit is not None:
            self.is_in_days_limit = is_in_days_limit

    @property
    def meal_id(self):
        """Gets the meal_id of this Meal.  # noqa: E501


        :return: The meal_id of this Meal.  # noqa: E501
        :rtype: int
        """
        return self._meal_id

    @meal_id.setter
    def meal_id(self, meal_id):
        """Sets the meal_id of this Meal.


        :param meal_id: The meal_id of this Meal.  # noqa: E501
        :type: int
        """

        self._meal_id = meal_id

    @property
    def food_name(self):
        """Gets the food_name of this Meal.  # noqa: E501


        :return: The food_name of this Meal.  # noqa: E501
        :rtype: str
        """
        return self._food_name

    @food_name.setter
    def food_name(self, food_name):
        """Sets the food_name of this Meal.


        :param food_name: The food_name of this Meal.  # noqa: E501
        :type: str
        """

        self._food_name = food_name

    @property
    def description(self):
        """Gets the description of this Meal.  # noqa: E501


        :return: The description of this Meal.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Meal.


        :param description: The description of this Meal.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def calorie(self):
        """Gets the calorie of this Meal.  # noqa: E501


        :return: The calorie of this Meal.  # noqa: E501
        :rtype: int
        """
        return self._calorie

    @calorie.setter
    def calorie(self, calorie):
        """Sets the calorie of this Meal.


        :param calorie: The calorie of this Meal.  # noqa: E501
        :type: int
        """

        self._calorie = calorie

    @property
    def _date(self):
        """Gets the _date of this Meal.  # noqa: E501


        :return: The _date of this Meal.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Meal.


        :param _date: The _date of this Meal.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def time(self):
        """Gets the time of this Meal.  # noqa: E501


        :return: The time of this Meal.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Meal.


        :param time: The time of this Meal.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def is_in_days_limit(self):
        """Gets the is_in_days_limit of this Meal.  # noqa: E501


        :return: The is_in_days_limit of this Meal.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_days_limit

    @is_in_days_limit.setter
    def is_in_days_limit(self, is_in_days_limit):
        """Sets the is_in_days_limit of this Meal.


        :param is_in_days_limit: The is_in_days_limit of this Meal.  # noqa: E501
        :type: bool
        """

        self._is_in_days_limit = is_in_days_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Meal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Meal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
